@using NovusNodoPluginLibrary
@inherits NovusUIPluginBase
@using GaelJ.BlazorCodeMirror6
@using GaelJ.BlazorCodeMirror6.Commands
@using GaelJ.BlazorCodeMirror6.Models

@using MudBlazor

<h3>.NET Settings Node</h3>
<div class="containerForCodeMirror">
    <CodeMirror6Wrapper Placeholder="Enter your code.... (2)"
    @bind-Doc=@config
    Theme=@Theme
    Language=@CodeMirrorLanguage.Csharp
    AllowHorizontalResize=false
    AllowVerticalResize=false
    MaxHeight="35em"
    Width="100%">
    </CodeMirror6Wrapper>
</div>
<MudButton OnClick="CompileCode" Variant="Variant.Filled" Color="ButtonCompileColor">Compile Code</MudButton>
<style>
    .containerForCodeMirror {
    }
</style>

@code
{
    /// <summary>
    /// The theme used for the CodeMirror editor.
    /// </summary>
    private ThemeMirrorTheme Theme = ThemeMirrorTheme.OneDark;

    /// <summary>
    /// Gets or sets the source code configuration.
    /// </summary>
    private string config
    {
        get { return ((NetFunctionConfig)PluginBase.PluginConfig).SourceCode; }
        set
        {
            if (((NetFunctionConfig)PluginBase.PluginConfig).SourceCode == value)
            {
                return;
            }

            ((NetFunctionConfig)PluginBase.PluginConfig).SourceCode = value;
            ((NetFunctionConfig)PluginBase.PluginConfig).LastCompileSuccess = false;
        }
    }

    /// <summary>
    /// Compiles the code asynchronously.
    /// </summary>
    private async Task CompileCode()
    {
        await PluginBase.PrepareWorkloadAsync().ConfigureAwait(false);
    }

    /// <summary>
    /// Gets the color of the compile button based on the last compile success status.
    /// </summary>
    public Color ButtonCompileColor => ((NetFunctionConfig)PluginBase.PluginConfig).LastCompileSuccess switch
    {
        true => Color.Success,
        false => Color.Warning,
    };

    /// <summary>
    /// Method invoked when the component is initialized.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        PluginBase.PluginConfig = PluginBase.PluginConfig == null ? new NetFunctionConfig() : (NetFunctionConfig)PluginBase.PluginConfig;
    }
}