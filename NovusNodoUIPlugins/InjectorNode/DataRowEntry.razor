@using MudBlazor
@using NovusNodoPluginLibrary.Enums

<MudGrid>
    <MudItem xs="1" Class="d-flex justify-center align-center">
        <MudText>msg.</MudText>
    </MudItem>
    <MudItem xs="2">
        <MudTextField T="string" @bind-Value="@Item.Variable" Variant="Variant.Text" Margin="Margin.Dense" Label="Variable"></MudTextField>
    </MudItem>
    <MudItem xs="1" Class="d-flex justify-center align-center">
        <MudText>=</MudText>
    </MudItem>
    <MudItem xs="2">
        <MudSelect T="string" @bind-Value="@selectedType" @bind-SelectedValues="AvailableTypes" Label="Standard" Variant="Variant.Text" Margin="Margin.Dense">
            @foreach (var name in Enum.GetNames<PossibleTypesEnum>())
            {
                <MudSelectItem Value="@name"></MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="5">
        @if (Item.SelectedType != PossibleTypesEnum.Number)
        {
            <MudTextField T="string" @bind-Value="@Item.Value" Variant="Variant.Text" Margin="Margin.Dense" Label="Value"></MudTextField>
        }
        else
        {
            <MudNumericField T="string" @bind-Value="@Item.Value" Variant="Variant.Text" Margin="Margin.Dense" Label="Value"></MudNumericField>
        }
    </MudItem>
    <MudItem xs="1">
        <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@(async () => await RemoveButton(Item.ID))"></MudIconButton>
    </MudItem>
</MudGrid>

<style>
    .mud-input,
    .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
        font-size: 0.875rem; /* 1 rem is default */
    }
</style>

@code
{
    /// <summary>
    /// Gets or sets the item associated with this data row entry.
    /// </summary>
    [Parameter] public Item Item { get; set; }

    /// <summary>
    /// Gets or sets the function to call when the remove button is clicked.
    /// </summary>
    [Parameter] public Func<string, Task> RemoveButton { get; set; }

    /// <summary>
    /// Gets or sets the selected type as a string.
    /// </summary>
    private string selectedType { get; set; }

    private IEnumerable<string> availableTypes;

    /// <summary>
    /// Gets or sets the available types for selection.
    /// </summary>
    public IEnumerable<string> AvailableTypes
    {
        get { return availableTypes; }
        set
        {
            availableTypes = value;
            if (value.Count() > 0)
            {
                if (Item.SelectedType.ToString() != value.First())
                {
                    Item.SelectedType = (PossibleTypesEnum)Enum.Parse(typeof(PossibleTypesEnum), value.First(), true);
                }
            }
        }
    }

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override void OnInitialized()
    {
        selectedType = Item.SelectedType.ToString();
        AvailableTypes = new HashSet<string>() { selectedType };
        base.OnInitialized();
    }
}