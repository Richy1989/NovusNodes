@using NovusNodoPluginLibrary
@inherits NovusUIPluginBase

@using MudBlazor
@using NovusNodoPluginLibrary.Enums

<MudContainer Class="pa-0" MaxWidth="MaxWidth.ExtraLarge">
    <MudPaper Elevation="4" Class="pa-0">

        <MudContainer Class="d-flex align-center justify-space-between">
            <MudItem>
                <MudText Typo="Typo.h5" Align="Align.Center">Injector Node Configuration</MudText>
            </MudItem>
            <MudItem>
                <MudIconButton OnClick="AddNewEntry" Icon="@Icons.Material.Filled.Add"></MudIconButton>
            </MudItem>
        </MudContainer>

        <MudDivider Class="my-2" />
        <MudTable Items="@Entries" Hover="true" Breakpoint="Breakpoint.Sm">
            <RowTemplate>
                <MudTd Class="pa-1"><DataRowEntry Item="@context" RemoveButton="RemoveButton"></DataRowEntry></MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>

    <MudSelect @bind-Value="injectMode" @bind-SelectedValues="InjectModes" T="string" Label="Repeat" Variant="Variant.Outlined" Margin="Margin.Dense">
        @foreach (var mode in Enum.GetNames(typeof(InjectMode)))
        {
            <MudSelectItem Value="@mode"></MudSelectItem>
        }
    </MudSelect>


    @if (isIntervalSelectionVisible)
    {
        <MudGrid Class="d-flex align-items-center">
            <!-- Text "Every" -->
            <MudItem>
                <MudText Class="align-center">Every</MudText>
            </MudItem>

            <!-- Input for a value -->
            <MudItem Class="ml-2">
                <MudTextField T="double" @bind-Value="InjectIntervalValue" Variant="Variant.Outlined" Placeholder="Value" Margin="Margin.Dense" />
            </MudItem>

            <!-- Selection for "Seconds, Minutes, Hours" -->
            <MudItem Class="ml-2">
                <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="injectInterval" @bind-SelectedValues="InjectIntervals" Margin="Margin.Dense">
                    @foreach (var interval in Enum.GetNames(typeof(InjectInterval)))
                    {
                        <MudSelectItem Value="@interval"></MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {

    private bool isIntervalSelectionVisible = false;
    private InjectMode InjectMode { get; set; } = InjectMode.None;
    public InjectInterval InjectInterval { get; set; } = InjectInterval.Seconds;
    public double InjectIntervalValue { get; set; } = 5;

    /// <summary>
    /// Gets or sets the collection of entries.
    /// </summary>
    public IEnumerable<Item> Entries { get; set; } = new List<Item>();

    /// <summary>
    /// Method invoked when the component is initialized.
    /// </summary>
    protected override void OnInitialized()
    {
        FillItems();

        injectInterval = InjectInterval.ToString();
        InjectIntervals = new HashSet<string>() { injectInterval };

        injectMode = InjectMode.ToString();
        InjectModes = new HashSet<string>() { injectMode };


        base.OnInitialized();
    }

    /// <summary>
    /// Fills the initial items in the Entries collection.
    /// </summary>
    private void FillItems()
    {
        AddNewEntry();
    }

    /// <summary>
    /// Removes an item from the Entries collection based on the provided ID.
    /// </summary>
    /// <param name="id">The ID of the item to remove.</param>
    private async Task RemoveButton(string id)
    {
        // Remove the item from the list
        Entries = Entries.Where(x => x.ID != id).ToList();
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    /// <summary>
    /// Adds a new entry to the Entries collection.
    /// </summary>
    private void AddNewEntry()
    {
        Item newItem = new Item
            {
                Variable = "payload",
                Value = "",
                SelectedType = PossibleTypesEnum.DateTime
            };
        // Add the new item to the list
        Entries = Entries.Append(newItem);
    }

    private void InjectionModeChanged()
    {
        if (InjectMode == InjectMode.Interval)
        {
            isIntervalSelectionVisible = true;
        }
        else
        {
            isIntervalSelectionVisible = false;
        }
    }

    private string injectInterval { get; set; }
    private IEnumerable<string> injectIntervals;
    private IEnumerable<string> InjectIntervals
    {
        get { return injectIntervals; }
        set
        {
            injectIntervals = value;
            if (value.Count() > 0)
            {
                if (InjectInterval.ToString() != value.First())
                {
                    InjectInterval = (InjectInterval)Enum.Parse(typeof(InjectInterval), value.First(), true);
                }
            }
        }
    }

    private string injectMode { get; set; }
    private IEnumerable<string> injectModes;
    private IEnumerable<string> InjectModes
    {
        get { return injectModes; }
        set
        {
            injectModes = value;
            if (value.Count() > 0)
            {
                if (InjectMode.ToString() != value.First())
                {
                    InjectMode = (InjectMode)Enum.Parse(typeof(InjectMode), value.First(), true);
                    InjectionModeChanged();
                }
            }
        }
    }
}