@using Microsoft.AspNetCore.Components.Web
@implements IDisposable

<div class="settings-node">
    <h3>JavaScript Settings Node</h3>
    <textarea @bind="SettingsCode" class="settings-textarea"></textarea>
    <button @onclick="SaveSettings" class="save-button">Save</button>
</div>

<style>
    .settings-node {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    width: 100%;
    /* 
    padding: 20px 20px 20px 20px;
    margin: 20px 20px 20px 20px; */
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #f9f9f9;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .settings-node h3 {
    margin: 10px 10px 10px;
    font-size: 1.2rem;
    /* color: #333; */
    }

    .settings-textarea {
    width: 100%;
    height: 300px;
    resize: none;
    font-size: 1rem;
    font-family: monospace;
    color: #333;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    background-color: #fff;
    }

    .settings-textarea:focus {
    outline: none;
    border-color: #0078d7;
    box-shadow: 0 0 5px rgba(0, 120, 215, 0.5);
    }

    .save-button {
    margin-top: 10px;
    margin-left: 10px;
    margin-bottom: 10px;
    padding: 8px 16px;
    font-size: 1rem;
    color: #fff;
    background-color: #0078d7;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
    }

    .save-button:hover {
    background-color: #005a9e;
    }

    .save-button:active {
    background-color: #004578;
    }
</style>

@code {

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    [Parameter]
    public Func<string, Task> GetConfig { get; set; }

    // To detect redundant calls
    private bool _disposedValue;

    private string SettingsCode { get; set; } = string.Empty;

    public JavaScriptFunctionPluginUI()
    {
        Console.WriteLine("JavaScriptFunctionPluginUI component initialized");
    }

    private async Task SaveSettings()
    {
        await GetConfig(SettingsCode).ConfigureAwait(false);
        // Save the settings code to the plugin's configuration
        // This is just a placeholder, you need to implement the actual saving logic
        Console.WriteLine("This is the Plugin: " + SettingsCode);
        await Task.CompletedTask;
    }

    /// <summary>
    /// Public implementation of Dispose pattern callable by consumers.
    /// </summary>
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Protected implementation of Dispose pattern.
    /// </summary>
    /// <param name="disposing">Indicates whether the method is called from Dispose.</param>
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposedValue)
        {
            if (disposing)
            {
                Console.WriteLine("JavaScriptFunctionPluginUI component disposed");
            }

            _disposedValue = true;
        }
    }
}