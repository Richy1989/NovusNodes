@rendermode InteractiveServer

@using NovusNodo.Components.Pages
@inject NovusNodo.Management.NovusUIManagement NovusUIManagement
@inject ILogger<SettingsSidebar> Logger
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JS


<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" MinimumTabWidth="20px" PanelClass="pa-4">
    <MudTabPanel Icon="@Icons.Material.Filled.Code">
        <MudText Style="text-align:center;" Typo="Typo.h4">Config</MudText>
        <div class="name">
            <MudTextField T="string" @bind-value="CurrentSelectedNodeName" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline" HelperText="Change the Node Name" HelperTextOnFocus="true" Variant="Variant.Text" />
        </div>
        <div class="sidebarCustomContent" >
            @if (DynNodeUIType is not null)
            {
                <DynamicComponent Type="DynNodeUIType" Parameters="Parameters" />
            }
        </div>
    </MudTabPanel>
    <div style="padding-top:10px; display: flex; justify-content: space-between; align-items: center;">            
        <MudButton Onclick="SaveSettings" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
        <MudButton Onclick="CancelSettings" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close">Cancel</MudButton>
    </div>
</MudTabs>

@code
{
    /// <summary>
    /// Represents the name of the currently selected node.
    /// </summary>
    public string CurrentSelectedNodeName = "";

    /// <summary>
    /// Gets or sets the parameters to be passed to the dynamic component.
    /// </summary>
    public IDictionary<string, object> Parameters { get; set; }

    /// <summary>
    /// Represents the type of the dynamic component to be rendered.
    /// </summary>
    private Type DynNodeUIType;

    /// <summary>
    /// Saves the settings of the currently selected node.
    /// </summary>
    public async Task SaveSettings()
    {
        if (NovusUIManagement.CurrentlySelectedNode != null && NovusUIManagement.CurrentlySelectedNode.SaveSettings != null)
        {
            await NovusUIManagement.CurrentlySelectedNode.SaveSettings();
        }

        if (NovusUIManagement.CurrentlySelectedNode != null)
        {
            NovusUIManagement.CurrentlySelectedNode.Name = CurrentSelectedNodeName;
            await JS.InvokeVoidAsync("JJSChangeNodeLabel", [$"{NovusUIManagement.CurrentlySelectedNode.ID}", $"{CurrentSelectedNodeName}"]);
        }
    }

    /// <summary>
    /// Saves the settings of the currently selected node.
    /// </summary>
    public async Task CancelSettings()
    {
        NovusUIManagement.CurrentlySelectedNode = null; 
        NovusUIManagement.SideBarUI = typeof(BlankConfig);
        Parameters = PrepareParameters(typeof(BlankConfig));
        DynNodeUIType = NovusUIManagement.SideBarUI;
        await JS.InvokeVoidAsync("SetResizableSidebarWidth", "0px");

        await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
    }

    /// <summary>
    /// Initializes the component and subscribes to the NodeDoubleClicked event.
    /// </summary>
    protected override void OnInitialized()
    {
        Parameters = PrepareParameters(NovusUIManagement.SideBarUI);

        DynNodeUIType = NovusUIManagement.SideBarUI;

        if (NovusUIManagement.CurrentlySelectedNode != null)
            CurrentSelectedNodeName = NovusUIManagement.CurrentlySelectedNode.Name;

        NovusUIManagement.NodeDoubleClicked += async (node) =>
        {
            Type ui = null;
            if (node.UI != null)
            {
                ui = node.UI;
            }
            else
            {
                ui = typeof(BlankConfig);
            }

            Parameters = PrepareParameters(ui);

            DynNodeUIType = null;
            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });

            DynNodeUIType = ui;

            CurrentSelectedNodeName = node.Name;

            await JS.InvokeVoidAsync("SetResizableSidebarWidth", "400px");

            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        };
    }

    /// <summary>
    /// Prepares the parameters to be passed to the dynamic component.
    /// </summary>
    /// <param name="ui">The type of the dynamic component.</param>
    /// <returns>A dictionary containing the parameters.</returns>
    private IDictionary<string, object> PrepareParameters(Type ui)
    {
        IDictionary<string, object> parameters = new Dictionary<string, object>();

        if (NovusUIManagement.CurrentlySelectedNode != null)
        {
            ILogger logger = LoggerFactory.CreateLogger(ui);
            parameters.Add("Logger", logger);
            parameters.Add("PluginBase", NovusUIManagement.CurrentlySelectedNode.PluginBase);
        }

        return parameters;
    }
}
