@using NovusNodo.Components.Pages
@inject NovusNodo.Management.NovusUIManagement NovusUIManagement
@rendermode InteractiveServer

<div class="wrapper" >
    <div class="sidebarCustom" style="width: @string.Format($"{InitWidth}px"); right: @string.Format($"{InitWidth}px")">
        <header class="header">Tivotal</header>
        <a href="#" class="active">
            <i class="fas fa-home"></i>
            <span>Home</span>
        </a>
        <a href="#">
            <i class="fas fa-message"></i>
            <span>Messages</span>
        </a>

        <a href="#">
            <i class="fas fa-message"></i>

            @if (DynNodeUIType is not null)
            {
                <span><DynamicComponent Type="DynNodeUIType" /></span>
            }
        </a>

        <div class="resizerCustom"></div>
    </div>
</div>

@code {
    [Parameter]
    public int InitWidth { get; set; } = 240;

    private Type DynNodeUIType;

    protected override void OnInitialized()
    {
        NovusUIManagement.NodeDoubleClicked += async (node) =>
        {
            DynNodeUIType = node.UI;

            StateHasChanged();
            await Task.CompletedTask.ConfigureAwait(false);
        };

        DynNodeUIType = NovusUIManagement.SideBarUI;
    }

    public Type GetUI()
    {
        if (NovusUIManagement != null && NovusUIManagement.SideBarUI != null)
        {
            return NovusUIManagement.SideBarUI;
        }

        return typeof(BlankConfig);
    }

}
