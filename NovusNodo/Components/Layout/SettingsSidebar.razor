@rendermode InteractiveServer

@using NovusNodo.Components.Pages
@inject NovusNodo.Management.NovusUIManagement NovusUIManagement
@inject ILogger<SettingsSidebar> Logger
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JS

<div class="wrapper" >
    <div class="sidebarCustom" style="width: @string.Format($"{InitWidth}px"); right: @string.Format($"{InitWidth}px")">

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" MinimumTabWidth="20px" PanelClass="pa-4">
            <MudTabPanel Icon="@Icons.Material.Filled.Code">
                <header class="header">Novus - Config</header>
                <div class="name">
                    <MudTextField T="string" @bind-value="CurrentSelectedNodeName" Label="Selected Node:" HelperText="Change the Node Name" HelperTextOnFocus="true" Variant="Variant.Text" />
                </div>
                <div class="sidebarCustomContent" >
                    @if (DynNodeUIType is not null)
                    {
                        <DynamicComponent Type="DynNodeUIType" Parameters="Parameters" />
                    }
                </div>
            </MudTabPanel>
            <MudButton Onclick="SaveSettings" Variant="Variant.Filled" Color="Color.Primary" Class="save-button">Save</MudButton>
        </MudTabs>
        <div class="resizerCustom"></div>
    </div>
</div>

<style>
    .sidebarCustom {
    background:@NovusUIManagement.GetCurrentPalette().BackgroundGray;
    }

    .sidebarCustom header {
    background:@NovusUIManagement.GetCurrentPalette().BackgroundGray;
    color:@NovusUIManagement.GetCurrentPalette().TextPrimary;
    }

    .sidebarCustom a {
    color:@NovusUIManagement.GetCurrentPalette().DrawerText;
    }
</style>

@code
{
    /// <summary>
    /// Represents the name of the currently selected node.
    /// </summary>
    public string CurrentSelectedNodeName = "";

    /// <summary>
    /// Gets or sets the initial width of the sidebar.
    /// </summary>
    [Parameter]
    public int InitWidth { get; set; } = 240;

    /// <summary>
    /// Gets or sets the parameters to be passed to the dynamic component.
    /// </summary>
    public IDictionary<string, object> Parameters { get; set; }

    /// <summary>
    /// Represents the type of the dynamic component to be rendered.
    /// </summary>
    private Type DynNodeUIType;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("GJSInitSettingsSideBar");
        }
    }

    /// <summary>
    /// Saves the settings of the currently selected node.
    /// </summary>
    public async Task SaveSettings()
    {
        if (NovusUIManagement.CurrentlySelectedNode != null && NovusUIManagement.CurrentlySelectedNode.SaveSettings != null)
        {
            await NovusUIManagement.CurrentlySelectedNode.SaveSettings();
        }

        if (NovusUIManagement.CurrentlySelectedNode != null)
        {
            NovusUIManagement.CurrentlySelectedNode.Name = CurrentSelectedNodeName;
            await JS.InvokeVoidAsync("JJSChangeNodeLabel", [$"{NovusUIManagement.CurrentlySelectedNode.ID}", $"{CurrentSelectedNodeName}"]);
        }
    }

    /// <summary>
    /// Initializes the component and subscribes to the NodeDoubleClicked event.
    /// </summary>
    protected override void OnInitialized()
    {

        Parameters = PrepareParameters(NovusUIManagement.SideBarUI);

        DynNodeUIType = NovusUIManagement.SideBarUI;

        if (NovusUIManagement.CurrentlySelectedNode != null)
            CurrentSelectedNodeName = NovusUIManagement.CurrentlySelectedNode.Name;

        NovusUIManagement.NodeDoubleClicked += async (node) =>
        {
            Type ui = null;
            if (node.UI != null)
            {
                ui = node.UI;
            }
            else
            {
                ui = typeof(BlankConfig);
            }

            Parameters = PrepareParameters(ui);

            DynNodeUIType = null;
            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });

            DynNodeUIType = ui;

            CurrentSelectedNodeName = node.Name;

            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        };
    }

    /// <summary>
    /// Prepares the parameters to be passed to the dynamic component.
    /// </summary>
    /// <returns>A dictionary containing the parameters.</returns>
    private IDictionary<string, object> PrepareParameters(Type ui)
    {
        IDictionary<string, object> parameters = new Dictionary<string, object>();

        if (NovusUIManagement.CurrentlySelectedNode != null)
        {
            ILogger logger = LoggerFactory.CreateLogger(ui);
            parameters.Add("Logger", logger);
            parameters.Add("GetConfig", GetConfig);
            parameters.Add("PluginBase", NovusUIManagement.CurrentlySelectedNode.PluginBase);
        }

        return parameters;
    }

    /// <summary>
    /// Logs the provided settings code to the console.
    /// </summary>
    /// <param name="configString">The settings config to log.</param>
    private async Task GetConfig(string configString)
    {
        Logger.LogDebug($"Settings saved: {configString}");
        await Task.CompletedTask;   
    }
}
