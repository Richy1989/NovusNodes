@using NovusNodo.Components.Pages
@inject NovusNodo.Management.NovusUIManagement NovusUIManagement
@rendermode InteractiveServer
@inject ILogger<SettingsSidebar> Logger
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JS

<div class="wrapper" >
    <div class="sidebarCustom" style="width: @string.Format($"{InitWidth}px"); right: @string.Format($"{InitWidth}px")">
        <header class="header">Novus - Config</header>
        <div class="sidebarCustomContent" >
            @if (DynNodeUIType is not null)
            {
                <DynamicComponent Type="DynNodeUIType" Parameters="Parameters" />
            }
        </div>
        <div class="resizerCustom"></div>
    </div>
</div>

<style>

    .sidebarCustom {
    background: @NovusUIManagement.GetCurrentPalette().BackgroundGray;
    }

    .sidebarCustom header {
    background:@NovusUIManagement.GetCurrentPalette().BackgroundGray;
    color:@NovusUIManagement.GetCurrentPalette().TextPrimary;
    }

    .sidebarCustom a {
    color:@NovusUIManagement.GetCurrentPalette().DrawerText;
    }

</style>

@code
{
    /// <summary>
    /// Gets or sets the initial width of the sidebar.
    /// </summary>
    [Parameter]
    public int InitWidth { get; set; } = 240;

    /// <summary>
    /// Gets or sets the parameters to be passed to the dynamic component.
    /// </summary>
    public IDictionary<string, object> Parameters { get; set; }

    /// <summary>
    /// Represents the type of the dynamic component to be rendered.
    /// </summary>
    private Type DynNodeUIType;

    /// <summary>
    /// Initializes the component and subscribes to the NodeDoubleClicked event.
    /// </summary>
    protected override void OnInitialized()
    {
        Parameters = PrepareParameters();
        DynNodeUIType = NovusUIManagement.SideBarUI;

        NovusUIManagement.NodeDoubleClicked += async (node) =>
        {
            DynNodeUIType = node.UI;

            Parameters = PrepareParameters();

            StateHasChanged();
            await Task.CompletedTask.ConfigureAwait(false);
        };
    }

    /// <summary>
    /// Prepares the parameters to be passed to the dynamic component.
    /// </summary>
    /// <returns>A dictionary containing the parameters.</returns>
    private IDictionary<string, object> PrepareParameters()
    {
        IDictionary<string, object> parameters = new Dictionary<string, object>();

        if (NovusUIManagement.CurrentlySelectedNode != null)
        {
            ILogger logger = LoggerFactory.CreateLogger(NovusUIManagement.CurrentlySelectedNode.UI);
            parameters.Add("Logger", logger);
            parameters.Add("GetConfig", GetConfig);
            parameters.Add("PluginBase", NovusUIManagement.CurrentlySelectedNode.PluginBase);
        }

        return parameters;
    }

    /// <summary>
    /// Displays a message with the current date and time.
    /// </summary>
    /// <param name="e">The mouse event arguments.</param>
    private void ShowDTMessage(MouseEventArgs e)
    {
        var message = $"The current DT is: {DateTime.Now}.";
    }

    /// <summary>
    /// Method called after the component has rendered.
    /// </summary>
    /// <param name="firstRender">Indicates if this is the first render.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // await JS.InvokeVoidAsync("GJSHighlightCode").ConfigureAwait(false);
    }

    /// <summary>
    /// Logs the provided settings code to the console.
    /// </summary>
    /// <param name="configString">The settings config to log.</param>
    private async Task GetConfig(string configString)
    {
        Logger.LogDebug($"Settings saved: {configString}");
        await Task.CompletedTask;   
    }
}
