@rendermode InteractiveServer

@using NovusNodo.Components.Pages
@using NovusNodo.Helper
@using NovusNodoCore.NodeDefinition
@implements IDisposable
@inject NovusNodo.Management.NovusUIManagement NovusUIManagement
@inject ILogger<SettingsSidebar> Logger
@inject ILoggerFactory LoggerFactory
@inject IJSRuntime JS


<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Style="height:100%; width:100%;" MinimumTabWidth="20px" PanelClass="pa-4 flex-grow-1">
    <MudTabPanel Icon="@Icons.Material.Filled.Code">
        <MudPaper Class="d-flex flex-column flex-grow-1" Style="padding:0px; height:100%;" Elevation="0">
            <MudText Style="text-align:center;" Typo="Typo.h4">Config</MudText>
            <div class="name">
                <MudTextField T="string" @bind-value="CurrentSelectedNodeName" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DriveFileRenameOutline" HelperText="Change the Node Name" HelperTextOnFocus="true" Variant="Variant.Text" />
            </div>
            <MudSwitch @bind-Value="@IsNodeEnabled" Color="Color.Success" Style="padding-bottom:5px;">
                @if (NovusUIManagement.CurrentlySelectedNode != null)
                {
                    @if (NovusUIManagement.CurrentlySelectedNode.IsEnabled)
                    {
                        <a>Enabled</a>
                    }
                    else
                    {
                        <a>Disabled</a>
                    }
                }
            </MudSwitch>
            
            <MudContainer Class="d-flex flex-column flex-grow-1" Style="height:100%; width:100%; padding:0px;" MaxWidth="MaxWidth.False">
                @if (DynNodeUIType is not null)
                {
                    <DynamicComponent Type="DynNodeUIType" Parameters="Parameters" />
                }
                <div style="padding-top:10px; padding-bottom:10px; display: flex; justify-content: space-between; align-items: center;">
                    <MudButton Onclick="SaveSettings" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                    <MudButton Onclick="CancelSettings" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Close">Cancel</MudButton>
                </div>
            </MudContainer>
        </MudPaper>

    </MudTabPanel>

</MudTabs>

@code
{
    /// <summary>
    /// Indicates whether the object has been disposed.
    /// </summary>
    private bool _disposedValue;

    public string EnableDisableSwitch { get; set; } = "Enabled";



    public bool IsNodeEnabled
    {
        get
        {
            if(NovusUIManagement.CurrentlySelectedNode != null)
                return NovusUIManagement.CurrentlySelectedNode.IsEnabled;
            return false;
        }

        set
        {
            if (NovusUIManagement.CurrentlySelectedNode != null)
                NovusUIManagement.CurrentlySelectedNode.IsEnabled = value;
        }
    }

    /// <summary>
    /// Represents the name of the currently selected node.
    /// </summary>
    public string CurrentSelectedNodeName = "";

    /// <summary>
    /// Gets or sets the parameters to be passed to the dynamic component.
    /// </summary>
    public IDictionary<string, object> Parameters { get; set; }

    /// <summary>
    /// Represents the type of the dynamic component to be rendered.
    /// </summary>
    private Type DynNodeUIType;

    /// <summary>
    /// Saves the settings of the currently selected node.
    /// </summary>
    public async Task SaveSettings()
    {
        if (NovusUIManagement.CurrentlySelectedNode != null && NovusUIManagement.CurrentlySelectedNode.SaveSettings != null)
        {
            await NovusUIManagement.CurrentlySelectedNode.SaveSettings();
        }

        if (NovusUIManagement.CurrentlySelectedNode != null)
        {
            NovusUIManagement.CurrentlySelectedNode.Name = CurrentSelectedNodeName;
            try
            {
                await JS.InvokeVoidAsync("JJSChangeNodeLabel", [$"{NovusUIManagement.CurrentlySelectedNode.ID}", $"{CurrentSelectedNodeName}"]);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to change node label.");
            }
        }
    }

    /// <summary>
    /// Saves the settings of the currently selected node.
    /// </summary>
    public async Task CancelSettings()
    {
        NovusUIManagement.CurrentlySelectedNode = null; 
        NovusUIManagement.SideBarUI = typeof(BlankConfig);
        Parameters = PrepareParameters(typeof(BlankConfig));
        DynNodeUIType = NovusUIManagement.SideBarUI;
        await JS.InvokeVoidAsync("SetResizableSidebarWidth", "0px");

        await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
    }

    /// <summary>
    /// Initializes the component and subscribes to the NodeDoubleClicked event.
    /// </summary>
    protected override void OnInitialized()
    {

        Parameters = PrepareParameters(NovusUIManagement.SideBarUI);

        DynNodeUIType = NovusUIManagement.SideBarUI;

        if (NovusUIManagement.CurrentlySelectedNode != null)
            CurrentSelectedNodeName = NovusUIManagement.CurrentlySelectedNode.Name;

        NovusUIManagement.NodeDoubleClicked += OnNodeDoubleClicked;
    }

    private async Task OnNodeDoubleClicked(INodeBase node)
    {
        Type ui = null;
        if (node.UI != null)
        {
            ui = node.UI;
        }
        else
        {
            ui = typeof(BlankConfig);
        }

        Parameters = PrepareParameters(ui);

        if (DynNodeUIType == ui && DynNodeUIType != null)
        {
            DynNodeUIType = null;
            await InvokeAsync(() =>
            {
                base.StateHasChanged();
            });
        }
        DynNodeUIType = ui;

        CurrentSelectedNodeName = node.Name;

        await JS.InvokeVoidAsync("SetResizableSidebarWidth", "900px");

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    /// <summary>
    /// Prepares the parameters to be passed to the dynamic component.
    /// </summary>
    /// <param name="ui">The type of the dynamic component.</param>
    /// <returns>A dictionary containing the parameters.</returns>
    private IDictionary<string, object> PrepareParameters(Type ui)
    {
        IDictionary<string, object> parameters = new Dictionary<string, object>();

        if (NovusUIManagement.CurrentlySelectedNode != null)
        {
            ILogger logger = LoggerFactory.CreateLogger(ui);
            parameters.Add("Logger", logger);
            parameters.Add("PluginBase", NovusUIManagement.CurrentlySelectedNode.PluginBase);
        }

        return parameters;
    }

    /// <summary>
    /// Public implementation of Dispose pattern callable by consumers.
    /// </summary>
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Protected implementation of Dispose pattern.
    /// </summary>
    /// <param name="disposing">Indicates whether the method is called from Dispose.</param>
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposedValue)
        {
            if (disposing)
            {
                NovusUIManagement.NodeDoubleClicked -= OnNodeDoubleClicked;
            }

            _disposedValue = true;
        }
    }
}
