@inject NovusNodo.Management.NovusUIManagement NovusUIManagement
@inject NovusNodoCore.Managers.ExecutionManager ExecutionManager

@* <MudPaper Class="d-flex flex-row gap-4" Style="@($"background:rgb(0, 0, 0, 0.15);")" Elevation="0"> *@
<MudPaper Class="d-flex justify-center align-center">
    <MudTooltip Text="@PlayPauseButtonToolTip">
        <MudIconButton Icon="@(PlayPauseButtonIcon)" Color="@PlayPauseButtonColor" OnClick="@PlayPauseButtonIconToggle" Class="rounded-0" />
    </MudTooltip>
    <MudDivider Vertical="true" FlexItem="true" />
    <MudTooltip Text="@LineStyleToolTip">
        <MudIconButton Icon="@LineStyleIcon" Color="@Color.Surface" OnClick="@LineStyleToggle" Class="rounded-0" />
    </MudTooltip>
    <MudTooltip Text="Reset Zoom">
        <MudIconButton Icon="@Icons.Material.Filled.ZoomInMap" Color="@Color.Surface" OnClick="@ResetZoomToggle" Class="rounded-0" />
    </MudTooltip>
    <MudDivider Vertical="true" FlexItem="true" />
    <MudTooltip Text="@string.Format($"Raster Size: {NovusUIManagement.RasterSize}")">
        <MudPaper Class="pr-4 ps-4" Elevation="0">
            <MudSlider TickMarks="true" T="int" Step="5" Min="0" Max="50" Value="NovusUIManagement.RasterSize" ValueChanged=" async (a) => {await OnSliderValueChanged(a);}" />
        </MudPaper>
    </MudTooltip>
    <MudDivider Vertical="true" FlexItem="true" />
    <MudTooltip Text="Auto Save">
        <MudIconButton Icon="@AutoSaveIcon" Color="@AutoSaveColor" OnClick="@OnAutoSaveToggle" Class="rounded-0" />  
    </MudTooltip>
</MudPaper>

@code {
    /// <summary>
    /// Handles the event when the slider value changes.
    /// </summary>
    /// <param name="value">The new value of the slider.</param>
    private async Task OnSliderValueChanged(int value)
    {
        await NovusUIManagement.ChangeCanvasRasterSize(value);
    }

    /// <summary>
    /// Toggles the auto-save feature.
    /// </summary>
    private void OnAutoSaveToggle()
    {
        ExecutionManager.IsAutoSaveEnabled = !ExecutionManager.IsAutoSaveEnabled;
    }

    /// <summary>
    /// Gets the color for the auto-save toggle button.
    /// </summary>
    public Color AutoSaveColor => ExecutionManager.IsAutoSaveEnabled switch
    {
        true => Color.Success,
        false => Color.Warning,
    };

    /// <summary>
    /// Gets the icon for the auto-save toggle button.
    /// </summary>
    public string AutoSaveIcon => ExecutionManager.IsAutoSaveEnabled switch
    {
        true => Icons.Material.Rounded.AutoAwesome,
        false => Icons.Material.Rounded.AutoAwesome
    };

    /// <summary>
    /// Toggles the play/pause execution state.
    /// </summary>
    private void PlayPauseButtonIconToggle()
    {
        ExecutionManager.IsExecutionAllowed = !ExecutionManager.IsExecutionAllowed;
    }

    /// <summary>
    /// Gets the icon for the play/pause toggle button.
    /// </summary>
    public string PlayPauseButtonIcon => ExecutionManager.IsExecutionAllowed switch
    {
        true => Icons.Material.Rounded.PauseCircleFilled,
        false => Icons.Material.Outlined.PlayCircleFilled,
    };

    /// <summary>
    /// Gets the color for the play/pause toggle button.
    /// </summary>
    public Color PlayPauseButtonColor => ExecutionManager.IsExecutionAllowed switch
    {
        true => Color.Error,
        false => Color.Tertiary,
    };

    /// <summary>
    /// Gets the tooltip text for the play/pause toggle button.
    /// </summary>
    public string PlayPauseButtonToolTip => ExecutionManager.IsExecutionAllowed switch
    {
        true => "Stop Execution",
        false => "Start Execution",
    };

    /// <summary>
    /// Toggles the line style between linear and Bezier curve.
    /// </summary>
    private void LineStyleToggle()
    {
        ExecutionManager.UseBezierCurve = !ExecutionManager.UseBezierCurve;
    }

    /// <summary>
    /// Gets the tooltip text for the line style toggle button.
    /// </summary>
    public string LineStyleToolTip => ExecutionManager.UseBezierCurve switch
    {
        true => "Linear Link",
        false => "Bezier Curve Link",
    };

    /// <summary>
    /// Gets the icon for the line style toggle button.
    /// </summary>
    public string LineStyleIcon => ExecutionManager.UseBezierCurve switch
    {
        true => "fa-solid fa-circle-nodes",
        false => "fa-solid fa-bezier-curve",
    };

    /// <summary>
    /// Resets the zoom level.
    /// </summary>
    private async Task ResetZoomToggle()
    {
        await NovusUIManagement.ResetZoom();
    }
}
