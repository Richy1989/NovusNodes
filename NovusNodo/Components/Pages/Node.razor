@using NovusNodoCore.NodeDefinition
@using NovusNodoPluginLibrary
@inject NovusNodoCore.Managers.ExecutionManager ExecutionManager
@inject IJSRuntime JS;

<div class="note" id="@ID" style="background-color:@BackgroundColorCss">

    @if (NodeBase?.NodeType == NodeType.Finisher || NodeBase?.NodeType == NodeType.Worker)
    {   
        <div class="node-connector node-connector-left" @onmouseup="LeftConnectorDropped" @onmousedown="LeftConnectorClicked"></div>
    }
    @if (NodeBase?.NodeType == NodeType.Starter || NodeBase?.NodeType == NodeType.Worker)
    {
        <div class="node-connector node-connector-right" @onmousedown="RightConnectorClicked"></div>
    }

    <div class="node-header">@Name</div>
    <div class="node-body">@ChildContent</div>
    <div class="draggable"></div>
</div>

@code
{
    /// <summary>
    /// Gets or sets the node base.
    /// </summary>
    [Parameter] public INodeBase NodeBase { get; set; }

    /// <summary>
    /// Gets or sets the child content to be rendered inside the node.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; } // For additional content

    [Parameter] public Func<MouseEventArgs, string, Task> ConnectorClicked { get; set; }

    public async Task LeftConnectorClicked(MouseEventArgs e)
    {
        await Task.CompletedTask;
    }

    public async Task LeftConnectorDropped(MouseEventArgs e)
    {
        await Task.CompletedTask;
    }

    public async Task RightConnectorClicked(MouseEventArgs e)
    {
        await ConnectorClicked(e, ID);
    }

    /// <summary>
    /// Gets or sets the background color CSS string.
    /// </summary>
    private string BackgroundColorCss { get; set; } = ConvertColorToCSSColor(System.Drawing.Color.Violet);

    /// <summary>
    /// Gets or sets the name of the node.
    /// </summary>
    private string Name = "Not Defined";

    /// <summary>
    /// Gets or sets the ID of the node.
    /// </summary>
    private string ID = "Default";

    /// <summary>
    /// Method called when the component is initialized.
    /// </summary>
    protected override void OnInitialized()
    {
        if (NodeBase == null) return;
        BackgroundColorCss = ConvertColorToCSSColor(NodeBase.Background);
        Name = NodeBase.Name;
        ID = NodeBase.ID;
    }

    /// <summary>
    /// Converts a System.Drawing.Color to a CSS color string.
    /// </summary>
    /// <param name="color">The color to convert.</param>
    /// <returns>The CSS color string.</returns>
    public static string ConvertColorToCSSColor(System.Drawing.Color color)
    {
        return $"#{color.R:X2}{color.G:X2}{color.B:X2}";
    }

    /// <summary>
    /// Method called after the component has rendered.
    /// </summary>
    /// <param name="firstRender">Indicates if this is the first render.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.CompletedTask;
    }
}