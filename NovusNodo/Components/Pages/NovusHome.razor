@page "/"
@rendermode InteractiveServer

@implements IDisposable
@using System.Collections.Generic
@using System.Linq;
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using NovusNodoCore.NodeDefinition
@using NovusNodoPluginLibrary
@inject NovusNodoCore.Managers.ExecutionManager ExecutionManager
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<div class="main" id="main">
</div>
@code {
    /// <summary>
    /// Delegate for the redraw connections action.
    /// </summary>
    private static Func<Task>? RedrawConnectionsActionAsync;

    /// <summary>
    /// Redraws the connections asynchronously.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task LocalRedrawConnectionsAsync()
    {
        await DrawLine();
    }

    /// <summary>
    /// Draws lines between connected nodes.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    private async Task DrawLine()
    {
        foreach (var node in items.Values)
        {
            foreach (var next in node.NextNodes.Values)
            {
                await JS.InvokeVoidAsync("DrawLine", new object[] { $"{node.ID}", $"{next.ID}" });
            }
        }    
    }

    /// <summary>
    /// Dictionary to hold the available nodes.
    /// </summary>
    private static IDictionary<string, INodeBase> items = new Dictionary<string, INodeBase>();

    /// <summary>
    /// Method called when the component is initialized.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        RedrawConnectionsActionAsync = LocalRedrawConnectionsAsync;
        items = ExecutionManager.AvailableNodes;
        ExecutionManager.AvailableNodesUpdated += NodesAdded;
    }

    /// <summary>
    /// Invokable method to handle the movement of an element.
    /// </summary>
    /// <param name="id">The identifier of the element.</param>
    /// <param name="x">The new x-coordinate of the element.</param>
    /// <param name="y">The new y-coordinate of the element.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    [JSInvokable]
    public static async Task ElementMoved(string id, double x, double y)
    {
        items[id].UIConfig.X = x;
        items[id].UIConfig.Y = y;
        await Task.CompletedTask;
    }

    /// <summary>
    /// Event handler for when nodes are added.
    /// </summary>
    /// <param name="node">The node that was added.</param>
    private async Task NodesAdded(INodeBase node)
    {
        items = ExecutionManager.AvailableNodes;
        await JS.InvokeVoidAsync("JJSCreateNodeElement", [$"{node.ID}", $"{ConvertColorToCSSColor(node.Background)}", $"{node.Name}"]);
        await JS.InvokeVoidAsync("JJSAddPorts", [$"{node.ID}", $"{node.NodeType}"]);
    }

    /// <summary>
    /// Method called after the component has rendered.
    /// </summary>
    /// <param name="firstRender">Indicates if this is the first render.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("JJSCreatePaper", "main");

            foreach (var node in items.Values)
            {
                if (node.UIConfig.X > 0 && node.UIConfig.Y > 0)
                {
                    await JS.InvokeVoidAsync("JJSCreateNodeElement", [$"{node.ID}", $"{ConvertColorToCSSColor(node.Background)}", $"{node.Name}", $"{node.UIConfig.X}", $"{node.UIConfig.Y}"]);
                }
                else
                {
                    await JS.InvokeVoidAsync("JJSCreateNodeElement", [$"{node.ID}", $"{ConvertColorToCSSColor(node.Background)}", $"{node.Name}"]);
                }

                await JS.InvokeVoidAsync("JJSAddPorts", [$"{node.ID}", $"{node.NodeType}"]);
            }
        }
    }

    /// <summary>
    /// Converts a System.Drawing.Color to a CSS color string.
    /// </summary>
    /// <param name="color">The color to convert.</param>
    /// <returns>The CSS color string.</returns>
    public static string ConvertColorToCSSColor(System.Drawing.Color color)
    {
        return $"#{color.R:X2}{color.G:X2}{color.B:X2}";
    }

    /// <summary>
    /// Method called when the component is disposed.
    /// </summary>
    public void Dispose()
    {
        RedrawConnectionsActionAsync = null;
    }
}