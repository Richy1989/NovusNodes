@page "/"
@rendermode InteractiveServer

@using System.Collections.Generic
@using System.Linq;
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using NovusNodo.Components.Layout
@using NovusNodoCore.Enumerations
@using NovusNodoCore.Managers
@using NovusNodoCore.NodeDefinition
@using NovusNodoPluginLibrary
@inject NovusNodoCore.Managers.ExecutionManager ExecutionManager
@inject NovusNodo.Management.NovusUIManagement NovusUIManagement
@inject IJSRuntime JS
@inject ILogger<NovusHome> Logger
@implements IDisposable

<PageTitle>Nodes</PageTitle>

<MudContainer Class="d-flex align-start flex-grow-1 gap-4" Style="height:100%; padding:0px;" MaxWidth="MaxWidth.False">
    <div class="container">
        <main>
            <MudDynamicTabs @ref="@DynamicTabs" @bind-ActivePanelIndex="@UserIndex" @bind-ActivePanelIndex:after="this.OnTabIndexChanged"
            AddTab="@AddTab" CloseTab="@RemoveTab" Style="height:100%;"
            AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab. All data will be lost"
            PanelClass="pa-6 flex-grow-1 overflow-x-auto" Elevation="4" Rounded ApplyEffectsToContainer>

                <MudContainer Style="height:100%; padding:0px;" MaxWidth="MaxWidth.False">
                    <MudContainer id="main_container" Class="overflow-auto" Style="margin-left: 0; padding:0px; margin-right: 0; height:100%;" MaxWidth="MaxWidth.False">
                        @if (_pageReady)
                        {
                            @foreach (var tab in UserTabs)
                            {
                                <MudTabPanel ID="@tab.Id" Text="@tab.Label" ShowCloseIcon="@tab.ShowCloseIcon">
                                    <JointJSPaper TabID="@tab.Id.ToString()" CanvasReference="CanvasReference"></JointJSPaper>
                                </MudTabPanel>
                            }
                        }
                    </MudContainer>
                </MudContainer>
            </MudDynamicTabs>
        </main>
        <div class="resize-handle--x" data-target="aside"></div>
        <aside id="resizableSideBar" style="width:0px;">
            <MudContainer Class="d-flex align-start flex-grow-1 gap-4" Style="height:100%; padding:0px;" MaxWidth="MaxWidth.False">
                <SettingsSidebar></SettingsSidebar>
            </MudContainer>
        </aside>
    </div>
</MudContainer>

@code {

    /// <summary>
    /// Represents a view model for a tab.
    /// </summary>
    public class TabView
    {
        /// <summary>
        /// Gets or sets the label of the tab.
        /// </summary>
        public string Label { get; set; }
        /// <summary>
        /// Gets or sets the content of the tab.
        /// </summary>
        public string Content { get; set; }
        /// <summary>
        /// Gets or sets the unique identifier of the tab.
        /// </summary>
        public Guid Id { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the close icon should be shown.
        /// </summary>
        public bool ShowCloseIcon { get; set; } = true;
    }

    public IJSObjectReference CanvasReference { get; set; }
    /// <summary>
    /// Reference to the dynamic tabs component.
    /// </summary>
    public MudDynamicTabs DynamicTabs;
    /// <summary>
    /// List of user tabs.
    /// </summary>
    public List<TabView> UserTabs = new();
    /// <summary>
    /// Index of the currently active user tab.
    /// </summary>
    public int UserIndex = 0;
    /// <summary>
    /// Manager for the current node page.
    /// </summary>
    public NodePageManager currentNodePageManager;
    /// <summary>
    /// Flag indicating whether the state has changed.
    /// </summary>
    private bool _stateHasChanged;

    private bool _disposedValue;

    private bool _pageReady = false;

    /// <summary>
    /// Restores the user tabs from the execution manager.
    /// </summary>
    void RestoreUserTabs()
    {
        foreach (var tab in ExecutionManager.NodePages)
        {
            UserTabs.Add(new TabView { Id = new Guid(tab.Value.PageID), Label = tab.Value.PageName });
        }
        _stateHasChanged = true;
    }

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        RestoreUserTabs();
    }

    /// <summary>
    /// Called after the component has rendered.
    /// </summary>
    /// <param name="firstRender">Indicates whether this is the first render.</param>
    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (_stateHasChanged)
        {
            CanvasReference = await JS.InvokeAsync<IJSObjectReference>("import", "./node_framework/node_framework.js");
            await CanvasReference.InvokeVoidAsync("setSelectedCanvasTabId", UserTabs[UserIndex].Id.ToString());

            _pageReady = true;
            _stateHasChanged = false;
            StateHasChanged();

            if (UserTabs.Count > 0)
            {
                currentNodePageManager = ExecutionManager.NodePages[UserTabs[UserIndex].Id.ToString()];
                NovusUIManagement.CurrentlyOpenedPage = UserTabs[UserIndex].Id.ToString();
            }
        }
    }

    /// <summary>
    /// Adds a new tab.
    /// </summary>
    public void AddTab()
    {
        var tab = ExecutionManager.AddNewTab();
        UserTabs.Add(new TabView { Id = new Guid(tab.PageID), Label = tab.PageName });
        UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
        _stateHasChanged = true;
        Logger.LogDebug($"Added a new tab with ID: {tab.PageID}");
    }

    /// <summary>
    /// Removes a tab.
    /// </summary>
    /// <param name="panel">The tab panel to remove.</param>
    public async Task RemoveTab(MudTabPanel panel)
    {
        var id = (Guid)panel.ID;
        var tabView = UserTabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            Logger.LogDebug($"Removing tab with ID: {id}");
            ExecutionManager.RemoveTab(tabView.Id.ToString());
            UserTabs.Remove(tabView);
            _stateHasChanged = true;
        }
    }

    /// <summary>
    /// Called when the active tab index changes.
    /// </summary>
    private async Task OnTabIndexChanged()
    {
        if (UserIndex < 0)
        {
            AddTab();
            UserIndex = 0;
        }

        currentNodePageManager = ExecutionManager.NodePages[UserTabs[UserIndex].Id.ToString()];
        NovusUIManagement.CurrentlyOpenedPage = UserTabs[UserIndex].Id.ToString();

        await CanvasReference.InvokeVoidAsync("setSelectedCanvasTabId", UserTabs[UserIndex].Id.ToString());
        Logger.LogDebug($"Switched to tab with ID: {UserTabs[UserIndex].Id}");
    }

    /// <summary>
    /// Public implementation of Dispose pattern callable by consumers.
    /// </summary>
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Protected implementation of Dispose pattern.
    /// </summary>
    /// <param name="disposing">Indicates whether the method is called from Dispose.</param>
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposedValue)
        {
            if (disposing)
            {
                CanvasReference?.DisposeAsync();
            }

            _disposedValue = true;
        }
    }
}