<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  autoReload="true"
	  throwConfigExceptions="true"
	  internalLogLevel="Information">

	<!-- enable asp.net core layout renderers -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
	</extensions>

	<!-- the targets to write to -->
	<targets>
		<!-- File Target for all log messages with basic details -->
		<target xsi:type="File" name="allfile" fileName="c:\temp\nlog-AspNetCore-all-${shortdate}.log"
				layout="${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}" />

		<!-- File Target for own log messages with extra web details using some ASP.NET core renderers -->
		<target xsi:type="File" name="ownFile-web" fileName="c:\temp\nlog-AspNetCore-own-${shortdate}.log"
				layout="${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />

		<!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
		<target xsi:type="Console" name="lifetimeConsole" layout="${MicrosoftConsoleLayout}" />

		<!-- Define a network target for Log4View -->
		<target name="log4view" xsi:type="NLogViewer" address="udp://127.0.0.1:7071">
			<layout>${longdate} | ${level:uppercase=true} | ${logger} | ${message} ${exception:format=tostring}</layout>
		</target>

		<!-- Define a colored console target -->
		<target name="coloredConsole" xsi:type="ColoredConsole">
			<layout>${longdate} | ${level:uppercase=true} | ${logger} | ${message} ${exception:format=tostring}</layout>

			<!-- Define log level colors -->
			<highlight-row condition="level == LogLevel.Trace" foregroundColor="Gray" />
			<highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkMagenta" />
			<highlight-row condition="level == LogLevel.Info" foregroundColor="White" />
			<highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
			<highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
			<highlight-row condition="level == LogLevel.Fatal" foregroundColor="White" backgroundColor="Red" />
		</target>
	</targets>


	<!-- rules to map from logger name to target -->
	<rules>

		<logger name="System.*" finalMinLevel="Warn" />
		<logger name="Microsoft.*" finalMinLevel="Warn" />
		<logger name="Microsoft.Hosting.Lifetime*" finalMinLevel="Info" />

		<logger name="*" minlevel="Debug" writeTo="coloredConsole, log4view" />
		
		<!-- Suppress output from Microsoft framework when non-critical -->
		<logger name="System.*" finalMinLevel="Warn" />
		<logger name="Microsoft.*" finalMinLevel="Warn" />
		<!-- Keep output from Microsoft.Hosting.Lifetime to console for fast startup detection -->
		<logger name="Microsoft.Hosting.Lifetime*" finalMinLevel="Info" writeTo="lifetimeConsole" />

		<logger name="*" minLevel="Trace" writeTo="ownFile-web" />
	</rules>
</nlog>